#!/bin/bash

set -e

# Defaults to user options will be provided by CMake
modulesDestDir="@CMAKE_INSTALL_PREFIX@/modules"
NCEPLIBS_VERSION="@pVersion@"

# These will be filled by CMake
nceplibsInstallDir=@CMAKE_INSTALL_PREFIX@
tmplModulefilesDir=@CMAKE_CURRENT_SOURCE_DIR@/tmplModulefiles
LIBCOMPS=@LIBCOMPS_FILE@
DFLAT="@FLAT@"

[[ $DFLAT == "ON" ]] && FLAT="Y" || FLAT="N"

# Account for differences in the sed command on Linux and macOS
if [[ "@CMAKE_SYSTEM_NAME@" == "Darwin" ]]; then
  sedI="-i ''"
else
  sedI="-i"
fi

# All module load commands for the umbrella module
moduleLoadCommands=""

# All export statements for the umbrella shell scripts
bashScriptContents="#!/bin/bash"
tcshScriptContents="#!/bin/tcsh"

echo "Begin deploying modules ..."

for libName in $(ls -1 $tmplModulefilesDir); do

  # Ensure $libName is indeed a library being installed - this will skip the umbrella module "NCEPLIBS"
  isAbsent=$(cat $LIBCOMPS | grep -w $libName | wc -l)
  [[ $isAbsent -eq 0 ]] && continue

  echo "deploying modulefile for ... $libName"

  # Get the version being installed (if a branch, replace "/" with "-")
  # Must be consistent with CMakeLists.txt
  ver=$(cat $LIBCOMPS | grep -w $libName | cut -d"|" -f3)
  ver=$(echo ${ver} | sed -e "s/\//-/g")

  # Define source and destination modulefile name
  # Destination filename must be consistent with CMakeLists.txt
  srcModulefile=$tmplModulefilesDir/$libName/$libName.lua
  dstModulefile=$modulesDestDir/$libName/$ver.lua

  # Create destination directory for the modulefile and copy template to it
  mkdir -p $modulesDestDir/$libName
  \cp $srcModulefile $dstModulefile

  [[ $FLAT =~ [YyTt] ]] && prefix=${nceplibsInstallDir} || prefix=${nceplibsInstallDir}/$libName

  # sed does not like delimiter (/) to be a part of replacement string
  # so do magic
  repl=$(echo ${prefix} | sed -e "s#/#\\\/#g")

  # Replace #NCEPLIBS_ROOT# from template with $nceplibsInstallDir
  sed $sedI -e "s/#NCEPLIBS_ROOT#/${repl}/g" $dstModulefile

  # Add to module load commands for umbrella module
  moduleLoadCommands="${moduleLoadCommands}
module load $libName/$ver"

  # Add to export statements for umbrella shell scripts
  bashScriptContents="${bashScriptContents}
export ${libName}_ROOT=\"${prefix}\""
  tcshScriptContents="${tcshScriptContents}
setenv ${libName}_ROOT \"${prefix}\""

done

# Create NCEPLIBS umbrella module file
srcModulefile=$tmplModulefilesDir/NCEPLIBS/nceplibs.lua
dstModulefile=$modulesDestDir/NCEPLIBS/${NCEPLIBS_VERSION}.lua
mkdir -p $modulesDestDir/NCEPLIBS
\cp $srcModulefile $dstModulefile

# Replace #NCEPLIBS_ROOT# from template with $nceplibsInstallDir
repl=$(echo ${nceplibsInstallDir} | sed -e "s#/#\\\/#g")
sed $sedI -e "s/#NCEPLIBS_ROOT#/${repl}/g" $dstModulefile

# Set compiler environment variables for the umbrella modulefile
repl=$(echo "@CMAKE_C_COMPILER@" | sed -e "s#/#\\\/#g")
sed $sedI -e "s/#CC#/${repl}/g" $dstModulefile
repl=$(echo "@CMAKE_CXX_COMPILER@" | sed -e "s#/#\\\/#g")
sed $sedI -e "s/#CXX#/${repl}/g" $dstModulefile
repl=$(echo "@CMAKE_Fortran_COMPILER@" | sed -e "s#/#\\\/#g")
sed $sedI -e "s/#FC#/${repl}/g" $dstModulefile

# Append all module load commands to umbrella module
echo "${moduleLoadCommands}" >> $dstModulefile

echo "Done deploying modules ..."

echo "Generating shell scripts ..."

bashScript="@CMAKE_INSTALL_PREFIX@/bin/setenv_nceplibs.sh"
tcshScript="@CMAKE_INSTALL_PREFIX@/bin/setenv_nceplibs.csh"

# Set compiler environment variables for the shell scripts
bashScriptContents="${bashScriptContents}
export CC=\"@CMAKE_C_COMPILER@\"
export CXX=\"@CMAKE_CXX_COMPILER@\"
export FC=\"@CMAKE_Fortran_COMPILER@\""
tcshScriptContents="${tcshScriptContents}
setenv CC \"@CMAKE_C_COMPILER@\"
setenv CXX \"@CMAKE_CXX_COMPILER@\"
setenv FC \"@CMAKE_Fortran_COMPILER@\""

echo "${bashScript}"
echo "${bashScriptContents}" > $bashScript
echo "${tcshScript}"
echo "${tcshScriptContents}" > $tcshScript

echo "Done generating shell scripts ..."

exit 0
